name: C/C++ CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    defaults:
      run:
        shell: ${{ matrix.config.shell }}

    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache

    strategy:
      fail-fast: false
      matrix:
        config:
          - {name: apple-darwin, os: macos-latest, shell: sh, cmakeArgs: -DCMAKE_OSX_ARCHITECTURES=x86_64 -DWITH_SYSTEM_ZLIB=ON -DCURL_ZLIB=OFF -DCPR_BUILD_TESTS=OFF -DCPR_BUILD_TESTS_SSL=OFF -DCMAKE_USE_LIBSSH2=OFF -G Xcode -DAPPLE_BREAKPAD=ON, destDir: osx, buildType: RelWithDebInfo}
          - {name: x86_64-pc-linux-gnu, os: ubuntu-20.04, shell: sh, destDir: linux, buildType: RelWithDebInfo}
          - {name: x86_64-w64-mingw32, os: windows-2019, shell: 'msys2 {0}', cmakeArgs: -DWITH_SYSTEM_ZLIB=ON -DCURL_ZLIB=OFF -DCPR_FORCE_OPENSSL_BACKEND=ON -DCPR_BUILD_TESTS=OFF -DCPR_BUILD_TESTS_SSL=OFF -DCMAKE_USE_LIBSSH2=OFF -G "MinGW Makefiles", destDir: win, buildType: RelWithDebInfo}

    steps:
      - name: Set up build environment (macOS)
        run: |
          # Unlink and re-link to prevent errors when github mac runner images install python outside of brew. See https://github.com/actions/setup-python/issues/577
          brew list -1 | grep python | while read formula; do brew unlink $formula; brew link --overwrite $formula; done
          brew update
          brew install libao ldid ninja pulseaudio zlib asio gnutls lua
          VULKAN_VER=1.3.224.1 && aria2c --parameterized-uri=true https://{sdk.lunarg.com/sdk/download/$VULKAN_VER/mac,distfiles.macports.org/MoltenVK}/vulkansdk-macos-$VULKAN_VER.dmg
          hdiutil attach ./vulkansdk-macos-*.dmg
          sudo /Volumes/vulkansdk-macos-*/InstallVulkan.app/Contents/MacOS/InstallVulkan --root $HOME/VulkanSDK --accept-licenses --default-answer --confirm-command install
          hdiutil detach /Volumes/vulkansdk-macos-*
          echo "VULKAN_SDK=$HOME/VulkanSDK/macOS" >> $GITHUB_ENV
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
          echo "CCACHE_DIR=/tmp/ccache" >> $GITHUB_ENV
        if: runner.os == 'macOS'

      - name: Set up build environment (Linux)
        run: |
          sudo add-apt-repository ppa:christianrauch/libdecoration
          sudo apt-get update
          sudo apt-get -y install ccache libao-dev libasound2-dev libevdev-dev libgl1-mesa-dev liblua5.3-dev libminiupnpc-dev libpulse-dev libsdl2-dev libudev-dev libzip-dev ninja-build libcurl4-openssl-dev libasio-dev wget
          sudo apt-get -y install libwayland-dev libdecor-0-dev libaudio-dev libjack-dev libsndio-dev libsamplerate0-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxkbcommon-dev libdrm-dev libgbm-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev
        if: runner.os == 'Linux'

      - uses: actions/cache@v2
        id: cache
        with:
          path: $HOME/ccache
          key: ccache-${{ matrix.config.os }}-${{ github.sha }}
          restore-keys: ccache-${{ matrix.config.os }}-
        if: matrix.config.os == 'windows-2019'

      - name: Download DX2010
        if: matrix.config.os == 'windows-2019' && matrix.config.name != 'libretro-x86_64-w64-mingw32'
        run:   |
               curl -L https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o _DX2010_.exe
               7z x _DX2010_.exe DXSDK/Include -o_DX2010_
               7z x _DX2010_.exe DXSDK/Lib/x86 -o_DX2010_
               7z x _DX2010_.exe DXSDK/Lib/x64 -o_DX2010_
               mv _DX2010_/DXSDK $HOME/ccache
               rm -fR _DX*_ _DX*_.exe
        shell: bash

      - name: Set up build environment (Windows, MinGW)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: git base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-breakpad-git mingw-w64-x86_64-lua mingw-w64-x86_64-ninja mingw-w64-x86_64-SDL2 mingw-w64-x86_64-asio wget zip
        if: endsWith(matrix.config.name, 'w64-mingw32')

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Compile a universal OpenMP (macOS)
        run: HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew reinstall --build-from-source --formula ./shell/apple/libomp.rb
        if: matrix.config.name == 'apple-darwin'

      - name: Compile OpenMP.xcframework (iOS)
        run: ./shell/apple/emulator-ios/OpenMP/build_ios_openmp.sh --disableSimulator
        if: matrix.config.name == 'apple-ios'

      - uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.config.name }}-${{ github.sha }}
          restore-keys: ccache-${{ matrix.config.name }}-
        if: runner.os != 'macOS'

      - name: CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.buildType }} -DCMAKE_INSTALL_PREFIX=artifact ${{ matrix.config.cmakeArgs }} -DSENTRY_UPLOAD_URL=${{ env.SENTRY_UPLOAD_URL }}
          cmake --build build --config ${{ matrix.config.buildType }} --target install
        env:
          SENTRY_UPLOAD_URL: ${{ secrets.SENTRY_UPLOAD_URL }}

      # - name: Unit Tests
      #   run: |
      #     mkdir -p build/tests
      #     cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.buildType }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=tests -DENABLE_CTEST=ON ${{ matrix.config.cmakeArgs }}
      #     cmake --build build --config Release --parallel 2
      #     ./build/tests/flycast
      #   if: matrix.config.name == 'x86_64-pc-linux-gnu'

      - name: Install breakpad (linux)
        working-directory: core/deps/breakpad
        run: |
          ./configure
          make
          sudo make install
        if: matrix.config.os == 'ubuntu-20.04'

      - name: Dump symbols (linux)
        shell: bash
        run: |
          dump_syms artifact/bin/flycast-dojo > flycast-dojo.elf.sym 2>/dev/null
          BUILD_ID=`head -1 flycast-dojo.elf.sym | awk '{ print $4 }'`
          mkdir -p symbols/flycast-dojo.elf/$BUILD_ID
          mv flycast-dojo.elf.sym symbols/flycast-dojo.elf/$BUILD_ID
          strip artifact/bin/flycast-dojo
        if: matrix.config.os == 'ubuntu-22.04'

      - name: Dump symbols (windows)
        shell: msys2 {0}
        run: |
          core/deps/breakpad/bin/dump_syms artifact/bin/flycast-dojo.exe > flycast-dojo.exe.sym 2>/dev/null
          BUILD_ID=`head -1 flycast-dojo.exe.sym | awk '{ print $4 }'`
          mkdir -p symbols/flycast-dojo.exe/$BUILD_ID
          mv flycast-dojo.exe.sym symbols/flycast-dojo.exe/$BUILD_ID
          strip artifact/bin/flycast-dojo.exe
        if: matrix.config.name == 'x86_64-w64-mingw32'

      - name: Build breakpad (linux)
        working-directory: core/deps/breakpad
        run: |
          ./configure
          make
          sudo make install
        if: matrix.config.name == 'x86_64-pc-linux-gnu'

      - name: Dump symbols and make AppImage (linux)
        run: |
          mkdir -p symbols
          dump_syms artifact/bin/flycast-dojo > symbols/flycast-dojo.sym 2>/dev/null
          strip artifact/bin/flycast-dojo
          shell/linux/make-appimage.sh . artifact/bin appimage
          mv flycast-dojo-x86_64.AppImage artifact/bin
          rm artifact/bin/flycast-dojo
        if: matrix.config.name == 'x86_64-pc-linux-gnu'

      - name: Package app (macos)
        run: |
          cd artifact/bin
          zip -rm flycast-dojo.app.zip "Flycast Dojo.app"
        if: matrix.config.name == 'apple-darwin'

      - name: Package app (windows)
        shell: msys2 {0}
        run: |
          CURRENT_VERSION=flycast-`cat core/version.h | awk 'NR==3 { print $3 }' | tr -d '"' | tr -d '\r'`
          cd artifact/bin
          mkdir $CURRENT_VERSION
          mv flycast-dojo.exe $CURRENT_VERSION/flycast.exe
          cd $CURRENT_VERSION
          cp /mingw64/bin/{zlib1.dll,libssl-3-x64.dll,libcrypto-3-x64.dll} .
          wget https://github.com/blueminder/flycast-netplay-nvmem/archive/master.tar.gz
          tar zxvf master.tar.gz
          rm master.tar.gz
          mv flycast-netplay-nvmem-master/ default/
          rm default/README.md
          zip default.zip default/*
          mv default data
          mv default.zip data/
          mkdir replays
          mkdir ROMs
          wget https://raw.githubusercontent.com/blueminder/flycast-dojo/master/flycast_roms.json
          cd ..
          zip -r $CURRENT_VERSION.zip $CURRENT_VERSION/*
          rm -rf $CURRENT_VERSION
        if: matrix.config.name == 'x86_64-w64-mingw32'

      - uses: actions/upload-artifact@v2
        with:
          name: flycast-dojo-${{ matrix.config.name }}
          path: artifact/bin

      - name: Configure AWS Credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.S3_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          aws-region: us-east-2
        if: github.event_name == 'push' && matrix.config.destDir != ''

      - name: Upload to S3
        run: aws s3 sync artifact/bin s3://flycast-dojo-builds/${{ matrix.config.destDir }}/${GITHUB_REF#refs/}-$GITHUB_SHA --acl public-read --follow-symlinks
        shell: bash
        if: ${{ steps.aws-credentials.outputs.aws-account-id != '' }}

      - name: Upload symbols to S3
        shell: bash
        run: aws s3 sync symbols s3://flycast-dojo-symbols/${{ matrix.config.destDir }} --follow-symlinks
        if: ${{ steps.aws-credentials.outputs.aws-account-id != '' && (matrix.config.os == 'windows-2019' || matrix.config.os == 'ubuntu-22.04' || matrix.config.name == 'apple-darwin') }}

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@v1
        env:
          SENTRY_TOKEN: ${{ secrets.SENTRY_TOKEN }}
        with:
          url: https://sentry.io
          token: ${{ env.SENTRY_TOKEN }}
          organization: flycast
          project: minidump
        if: ${{ env.SENTRY_TOKEN != '' }}
      
      - name: Upload symbols to Sentry (Windows, macOS, Linux)
        run: |
          VERSION=$(git describe --tags --always)
          sentry-cli releases new "$VERSION"
          sentry-cli releases set-commits "$VERSION" --auto --ignore-missing
          sentry-cli upload-dif symbols
        shell: bash
        env:
          SENTRY_TOKEN: ${{ secrets.SENTRY_TOKEN }}
        if: ${{ env.SENTRY_TOKEN != '' && (matrix.config.name == 'x86_64-w64-mingw32' || matrix.config.name == 'apple-darwin' || matrix.config.name == 'x86_64-pc-linux-gnu') }}
        
